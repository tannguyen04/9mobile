// Requirements
// ============

@import "susy";
//Color
$black: #000;
$gray: #ccc;
$silver: #ddd;
//Breakpoints
$mobile-landscape: 480px;
$tablet: 768px;
$desktop: 1024px;
$desktop-wide: 1280px;
$desktop-superwide: 1440px;

// Grid variables
$container-margin: 10px;
$container-desktop: 936px;

$column-mobile: 4;
$column-tablet: 8;
$column-desktop: 12;

//Font variables
$base-font-size: 16px;
$base-line-height: 1.4;

// Add global paths
$image-path: '../images/';

$debug: false; // Set true to show the grid.
$show-image: 'hide';

@if $debug == false {
  $show-image: 'hide';
} @else {
  $show-image: 'show';
}

//Convert px to em
@function em($target, $context: $base-font-size) {
  @if $target == 0 {
    @return 0;
  }
  @return $target / $context + 0;
}

// STRIP UNIT
// It strips the unit of measure and returns it
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

// CONVERT TO REM
@function convert-to-rem($value, $base-value: $base-font-size) {
  $value: strip-unit($value) / strip-unit($base-value) * 1rem;
  @return $value;
}

// REM CALC
// New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
// Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:
//   rem-calc(10 20 30px 40);
// Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets
//   rem-calc((10, 20, 30, 40px));
// Optionally call with a different base (eg: 8px) to calculate rem.
//   rem-calc(16px 32px 48px, 8px);
// If you require to comma separate your list
//   rem-calc((16px, 32px, 48), 8px);
@function rem($values, $base-value: $base-font-size) {
  $max: length($values);
  @if $max == 1 {
    @return convert-to-rem(nth($values, 1), $base-value);
  }
  $rem-values: ();
  @for $i from 1 through $max {
    $rem-values: append($rem-values, convert-to-rem(nth($values, $i), $base-value));
  }
  @return $rem-values;
}


// Grid definition for all breakpoints. Use http://gridcalculator.dk/#/1200/12/52/20 to generate the grid.
$susy: (
  flow: ltr,
  math: fluid,
  container-position: rem($container-margin),
  container: auto,
  columns: $column-mobile,
  gutters: 15px / 44px,
  column-width: false,
  debug: (
    image: $show-image,
    color: rgba($black, .25),
    output: background,
    toggle: top right,
  )
);

$susy-tablet: (
  container-position: rem($container-margin * 4),
  container: auto,
  columns: $column-tablet,
  gutters: 38px / 59px,
  column-width: false,
  debug: (
    image: $show-image,
    color: rgba($gray, .25),
    output: background,
    toggle: top right,
  ),
);

$susy-desktop: (
  columns: $column-desktop,
  gutters: 36px / 62px,
  container-position: auto,
  container: rem($container-desktop),
  debug: (
    image: $show-image,
    color: rgba($silver, .25),
    output: background,
    toggle: top right,
  ),
);

// Pick specific breakpoint.
$susy-media: (
  // max-width: 769px
  mobileOnly: (
    media: screen,
    max-width: em($tablet - 1) * 1em,
  ),

  // max-width: 1999px
  mobileTabletOnly: (
    media: screen,
    max-width: em($desktop - 1) * 1em,
  ),

  // min-width: 480px
  mobileLandscape: em($mobile-landscape) * 1em,

  // min-width: 768px and max-width: 1999px
  tabletOnly: (
    media: screen,
    min-width: em($tablet) * 1em,
    max-width: em($desktop - 1) * 1em,
  ),

  // min-width: 768px
  tablet: em($tablet) * 1em,

  // min-width: 1999px
  desktop: em($desktop) * 1em,
);


.n-container {
  @include container();

  @include susy-media(tablet) {
    @include container($susy-tablet);
  }

  @include susy-media(desktop) {
    @include container($susy-desktop);
  }
}
